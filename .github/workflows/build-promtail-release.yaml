name: Build Promtail releases
on:
  # Manual trigger
  workflow_call:
    inputs:
      release:
        required: true
        type: string

permissions:
  contents: write

jobs:

  build-dynamic:
    name: Build dynamically-linked Promtail
    runs-on: ${{ matrix.config.uses }}
    strategy:
      matrix:
        config:
          - arch: amd64
            uses: ubuntu-20.04
          - arch: arm64
            uses: Ubuntu_ARM64_4C_16G_01
    steps:
      - name: Checkout grafana/loki, tag ${{inputs.release}}
        uses: actions/checkout@v2
        with:
          repository: grafana/loki
          ref: ${{inputs.release}}
          fetch-depth: 1
          path: ./loki-upstream
      - name: Checkout ${{github.repository}}
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: ./loki-k8s-operator
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.8'
      - name: Install systemd dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libsystemd-dev -y
      - name: Install build-essential
        run: |
          sudo apt-get update
          sudo apt-get install build-essential -y
      - name: Build Promtail
        working-directory: loki-upstream
        run: |
          GOHOSTOS=linux GOARCH=${{matrix.config.arch}} make promtail
          ldd clients/cmd/promtail/promtail
          file clients/cmd/promtail/promtail
      - name: Attach promtail-dynamic-${{matrix.config.arch}} artifact to run
        uses: actions/upload-artifact@v4
        with:
          name: promtail-dynamic-${{matrix.config.arch}}
          path: ./loki-upstream/clients/cmd/promtail/promtail

  test-dynamic:
    name: Test dynamically-linked Promtail
    runs-on: ${{ matrix.config.uses }}
    needs: build-dynamic
    # TODO: Also run tests on arm64
    strategy:
      matrix:
        config:
          - arch: amd64
            uses: ubuntu-20.04
          - arch: arm64
            uses: Ubuntu_ARM64_4C_16G_01
        base: [debian, ubuntu]
    steps:
      - name: Checkout ${{github.repository}}
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download the promtail-dynamic-${{matrix.config.arch}} artifact
        uses: actions/download-artifact@v4
        with:
          name: promtail-dynamic-${{matrix.config.arch}}
          path: ./dist/
      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
      - name: Build and test ${{matrix.base}} image
        # If promtail is borked on this base, the `docker run` invocation will fail
        run: |
          export DOCKER_BUILDKIT=1 
          sudo -E docker build . -f promtail-build/dynamic/test/Dockerfile.${{matrix.base}} -t promtail-dynamic-${{matrix.base}}
          sudo -E docker run promtail-dynamic-${{matrix.base}}

  build-static:
    name: Build statically-linked Promtail
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout grafana/loki, tag ${{inputs.release}}
        uses: actions/checkout@v2
        with:
          repository: grafana/loki
          ref: ${{inputs.release}}
          fetch-depth: 1
          path: ./loki-upstream
      - name: Checkout ${{github.repository}}
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: ./loki-k8s-operator
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.8'
      - name: Build Promtail
        # We run the make-based build with CGO_ENABLED=0
        # because we want statically-linked binaries and
        # cross-build for the specified architecture
        working-directory: loki-upstream
        run: |
          CGO_ENABLED=0 GOHOSTOS=linux GOARCH=${{matrix.arch}} make clients/cmd/promtail/promtail
          file clients/cmd/promtail/promtail
      - name: Attach promtail-static-${{matrix.arch}} artifact to run
        uses: actions/upload-artifact@v4
        with:
          name: promtail-static-${{matrix.arch}}
          path: ./loki-upstream/clients/cmd/promtail/promtail

  test-static:
    name: Test statically-linked Promtail
    runs-on: ${{ matrix.config.uses }}
    needs: build-static
    strategy:
      matrix:
        config:
          - arch: amd64
            uses: ubuntu-20.04
          - arch: arm64
            uses: Ubuntu_ARM64_4C_16G_01
        base: [ubuntu]
    steps:
      - name: Checkout ${{github.repository}}
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download the promtail-static-${{matrix.config.arch}} artifact
        uses: actions/download-artifact@v4
        with:
          name: promtail-static-${{matrix.config.arch}}
          path: ./dist/
      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
              $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      - name: Build and test ${{matrix.base}} image
        # If promtail is borked on this base, the `docker run` invocation will fail
        run: |
          export DOCKER_BUILDKIT=1 
          sudo -E docker build . -f promtail-build/static/test/Dockerfile.${{matrix.base}} -t promtail-static-${{matrix.base}}
          sudo -E docker run promtail-static-${{matrix.base}}

  tag:
    name: Publish Promtail release to ${{github.repository}}
    runs-on: ubuntu-latest
    needs: [test-dynamic, test-static]
    env:
      RELEASE: promtail-${{inputs.release}}
    steps:
      - name: Checkout grafana/loki, tag ${{inputs.release}}
        uses: actions/checkout@v2
        with:
          repository: grafana/loki
          ref: ${{inputs.release}}
          fetch-depth: 1
          path: ./loki-upstream
      - name: Checkout ${{github.repository}}, ${{github.ref}}
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          path: ./loki-k8s-operator
      - name: Create shallow tag
        # We rebase the commit from the release tag from the upstream loki
        # repository on the initial commit of canonical/loki-k8s-operator,
        # because GitHub does not allow us to push a shallow tag (tag to a
        # commit with no parent), so we "reconcile" the history of the
        # two repositories to have the initial commit of canonical/loki-k8s-operator
        # as common history.
        #
        # We also remove the build automation from the tag, as that is not something
        # we use, and if we left the .github folder, the pushing of the tag
        # to canonical/loki-k8s-operator would fail with:
        #
        #  refusing to allow a GitHub App to create or update workflow \
        #    `.github/workflows/backport.yml` without `workflows` permission
        run: |
          initial_operator_commit=$(cd ./loki-k8s-operator && git log ${{github.ref}} --oneline | tail -1 | awk '{ print $1 }')
          cd ./loki-upstream
          git config user.name github-actions
          git config user.email github-actions@github.com
          git remote add charm ../loki-k8s-operator
          git fetch charm
          git rebase "${initial_operator_commit}" --strategy-option ours

          echo "Removing build automation from the commit"

          git rm -rf .github || true
          git rm -rf .circleci || true
          git rm -rf .drone || true
          git rm .golangci.yml || true

          echo "Creating the new commit"

          git commit --amend --no-edit

          echo "Creating the new tag"

          git tag "${RELEASE}"

          echo "Pushing the tag to the local ${{github.repository}} clone"

          git push charm "${RELEASE}"

          echo "Pushing the tag to the upstream ${{github.repository}} repository"

          cd ../loki-k8s-operator
          git push origin "${RELEASE}"

  release:
    runs-on: ubuntu-latest
    needs: tag
    steps:
      - name: Download the artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: List artifacts
        run: |
          find .
      - name: Prepare artifacts for release
        run: |
          mkdir release
          for f in artifacts/promtail-*; do cp "${f}/promtail" "release/$(basename ${f})"; done
          cd release
          for f in *; do gzip ${f}; done
      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          name: "Promtail ${{inputs.release}}"
          body: |
            Dynamically- and statically-linked builds for Promtail, based on the [upstream '${{inputs.release}}'](https://github.com/grafana/loki/releases/tag/${{inputs.release}}) release of the `grafana/loki` project.
          artifacts: release/*
          tag: promtail-${{inputs.release}}
          token: ${{ secrets.GITHUB_TOKEN }}
